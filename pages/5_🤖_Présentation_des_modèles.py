import streamlit as st
import pandas as pd
from include.css_and_credit import css_and_credit
st.set_page_config(page_title="Exploitation cin√©matographique", page_icon='üé¨', layout="wide")

css_and_credit()

st.header("ü§ñ Pr√©sentation des mod√®les")

st.markdown("""
<div class ="centered-content"><div class="box"><h3>Choix du type de mod√®le :</h3>
    <p>Le choix d'utiliser un mod√®le de r√©gression plut√¥t qu'un mod√®le de classification dans notre projet de pr√©diction du nombre d'entr√©es en premi√®re semaine en France repose sur la nature continue et quantitative de notre variable cible.</p>
    <p>En effet, le nombre d'entr√©es en premi√®re semaine est une mesure num√©rique qui peut prendre une gamme de valeurs continues, refl√©tant la performance d'un film dans les salles de cin√©ma. Ainsi, plut√¥t que de cat√©goriser les films en groupes pr√©d√©finis, notre objectif est de pr√©dire avec pr√©cision le nombre r√©el d'entr√©es qu'un film r√©alisera.</p>
    <p>Nous avons donc d√©cid√© de tester notre jeu de donn√©es sur plusieurs mod√®les diff√©rents :</p>
</div></div>
""", unsafe_allow_html=True)

df_modele = pd.read_csv('data/score.csv')

st.markdown(f"""
        <div class ="centered-content">
            <div class="box2">
                <label for="5" style="cursor: pointer;"><h4>---------- Mod√®les basiques : ----------</h4></label>
                <input type="checkbox" id="5" class="hidden-checkbox">
                <img src="https://github.com/NicolasDartois/streamlit_2/blob/main/images/Modeles_basiques.png?raw=true" id="H5" class="hiddenText"/>
            </div>
        </div>
        <div class ="centered-content">
            <div class="box2">
                <label for="6" style="cursor: pointer;"><h4>---------- Mod√®les complexes : ----------</h4></label>
                <input type="checkbox" id="6" class="hidden-checkbox">
                <img src="https://github.com/NicolasDartois/streamlit_2/blob/main/images/Modeles_complexes.png?raw=true" id="6" class="hiddenText"/>
            </div>
        </div>
""", unsafe_allow_html=True)

st.markdown("""
<div class ="centered-content"><div class="box"><h3>Mod√®le retenu :</h3>
    <p>Nous avons d'abord test√© trois mod√®les simples diff√©rents (RandomForest, R√©gression lin√©aire, DecisionTree). Nous avons constat√© que le mod√®le random forest √©tait le plus prometteur (au niveau de la MAE et du score R2). Nous avons donc d√©cid√© de tester deux autres mod√®les similaires au random forest, le gradient boosting et le XGBoost, en utilisant GridSearchCV et RandomizedSearchCV pour trouver les meilleurs hyperparam√®tres.</p>
    <p>Nous avons retenu le gradient boosting avec les meilleurs hyperparam√®tres car c'est le mod√®le avec lequel nous avons obtenu les meilleures performances.</p>
</div></div>
""", unsafe_allow_html=True)

st.markdown("""
<div class ="centered-content"><div class="box"><h3>Mod√®le retenu :</h3>
    <p>Nous avons d'abord test√© trois mod√®les simples diff√©rents (RandomForest, R√©gression lin√©aire, DecisionTree). Nous avons constat√© que le mod√®le random forest √©tait le plus prometteur (au niveau de la MAE et du score R2). Nous avons donc d√©cid√© de tester deux autres mod√®les similaires au random forest, le gradient boosting et le XGBoost, en utilisant GridSearchCV et RandomizedSearchCV pour trouver les meilleurs hyperparam√®tres.</p>
    <p>Nous avons retenu le gradient boosting avec les meilleurs hyperparam√®tres car c'est le mod√®le avec lequel nous avons obtenu les meilleures performances.</p>
    <img src="https://github.com/NicolasDartois/streamlit_2/blob/main/images/Modeles_complexes.png?raw=true" id="6" class="hiddenText"/>
</div></div>
""", unsafe_allow_html=True)








    
