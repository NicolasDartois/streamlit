import streamlit as st
import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter
import seaborn as sns
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
from plotly.io import to_html
from bokeh.plotting import figure
from bokeh.models import HoverTool
from include.css_and_credit import css_and_credit

css_and_credit()

st.header("üìäAnalyse des Donn√©es (DataViz)üìä")

allocine = pd.read_csv('data/allocine.csv')


#---------------#
            
pays_counts = allocine['pays'].value_counts()
top_pays = pays_counts[:8]
autres = pays_counts[8:].sum()
top_pays['Autres'] = autres    
fig1 = go.Figure(data=[go.Pie(labels=top_pays.index, values=top_pays.values, hole=.3)])
fig1.update_traces(textposition='inside', textinfo='percent+label')
fig1.update_layout(
            width=800,
            height=600,
            title_text='üåé R√©partition des films par pays',
            annotations=[dict(text='Pays', x=0.5, y=0.5, font_size=20, showarrow=False)],
            legend_title="Pays"
            )
st.plotly_chart(fig1)

st.markdown('<div class="box"><p>La France (38,9%) et les U.S.A (30,7%) se partagent une importante part du march√© cin√©matographique fran√ßais. On remarque l‚Äôincroyable exportabilit√© des films am√©ricains qui √©galise presque le volume de films produits par le pays d‚Äôo√π sont issues les donn√©es.</p></div>', unsafe_allow_html=True)

#---------------#

fig2 = px.box(allocine, x="premiere_semaine_france",
            hover_data=['titre_original'],
            title='üé´ Analyse de la distribution de notre target: premi√®re semaine en France',
            labels={'premiere_semaine_france': 'Premi√®re semaine en France'})
fig2.update_layout(width=800, height=400)
fig2.update_layout(xaxis=dict(showgrid=True, gridwidth=1, gridcolor='lightgrey'))
st.plotly_chart(fig2)

st.markdown('<div class="box"><p>Ces donn√©es sugg√®rent une forte asym√©trie dans la distribution des performances des films. La pr√©sence de quelques films avec des r√©sultats exceptionnels lors de la premi√®re semaine indique que ces films peuvent √™tre des moteurs significatifs pour l‚Äôindustrie, tandis que la majorit√© des films affichent des performances beaucoup plus modestes.</p></div>', unsafe_allow_html=True)

#---------------#
distrib = {
    2000: 532,
    2001: 504,
    2002: 487,
    2003: 509,
    2004: 559,
    2005: 550,
    2006: 589,
    2007: 573,
    2008: 555,
    2009: 558,
    2010: 579,
    2011: 588,
    2012: 614,
    2013: 654,
    2014: 663,
    2015: 652,
    2016: 716,
    2017: 693,
    2018: 683,
    2019: 746,
    2020: 364,
    2021: 454,
    2022: 681,
    2023: 712
}
annees = list(distrib.keys())
valeurs = list(distrib.values())
colorscale = [[0, 'blue'], [1, 'orange']]
fig3 = go.Figure(data=[go.Bar(x=annees, y=valeurs, marker=dict(color=valeurs, colorscale='Viridis', cmin=0, cmax=max(valeurs)))])
fig3.update_layout(width=800, height=400)
fig3.update_layout(title='üéûÔ∏è Nombre de films sortis par ann√©e en France (apr√®s 2000)', xaxis_title='Ann√©e de sortie', yaxis_title='Nombre de films')
st.plotly_chart(fig3)

st.markdown('<div class="box"><p>On remarque une augmentation progressive du nombre de films sortis chaque ann√©e, le pic √©tant atteint en 2019 avec 746 films sortis au cours de l‚Äôann√©e. Les effets de la pand√©mie mondiale en 2020 et 2021 sont √©galement visibles sur ce graphique. L‚Äôann√©e derni√®re, 712 films sont sortis sur les √©crans fran√ßais, soit une moyenne de 13,7 films par semaine.</p></div>', unsafe_allow_html=True)

#---------------#

fig4 = px.scatter(
            allocine, 
            x='cumul_france', 
            y='premiere_semaine_france',
            hover_data=['titre_original'],
            title=f'üìà Corr√©lation entre le cumul en France et la premi√®re semaine en France: 0.92',
            labels={'cumul_france': 'Cumul en France', 'premiere_semaine_france': 'Premi√®re semaine en France'},
            opacity=0.5,
            trendline='ols'
            )
fig4.data[1].line.color = 'red'
fig4.update_layout(width=800, height=400)
fig4.update_layout(margin={'l': 40, 'b': 40, 't': 80, 'r': 40}, hovermode='closest')
fig4.update_xaxes(showgrid=True, title='Cumul en France')
fig4.update_yaxes(showgrid=True, title='Premi√®re semaine en France')
st.plotly_chart(fig4)

st.markdown('<div class="box"><p>En calculant la corr√©lation entre la premi√®re semaine et le cumul en France, on obtient un score de 0.92. La corr√©lation est donc positive et tr√®s √©lev√©e. Ainsi, si un film r√©alise de bonnes performances en premi√®re semaine en termes d‚Äôentr√©es, il a des chances de conna√Ætre le succ√®s pendant toute son exploitation cin√©matographique. Cela suppose donc que le nombre d‚Äôentr√©es de la premi√®re semaine peuvent √™tre utilis√©es pour estimer le nombre total d‚Äôentr√©es.</p></div>', unsafe_allow_html=True)

#---------------#
genres_to_include = ['Drame', 'Com√©die', 'Action', 'Com√©die dramatique', 'Aventure', 
        'Documentaire', 'Biopic', 'Animation', 'Policier', 'Epouvante-horreur', 
        'Thriller', 'Fantastique']

genres_color = {'Drame' : 'blue', 'Com√©die' : 'red', 'Action' : 'orange', 'Com√©die dramatique' : 'purple', 'Aventure' : 'yellow', 
        'Documentaire' : 'grey', 'Biopic' : 'green', 'Animation' : 'pink', 'Policier' : 'brown', 'Epouvante-horreur' : 'black', 
        'Thriller' : 'coral', 'Fantastique' : 'turquoise'}

allocine['genre'] = allocine['genre'].str.split(', ')
allocine = allocine.explode('genre')

allocine['genre'] = allocine['genre'].str.strip()
allocine['genre'] = allocine['genre'].str.capitalize()
filtered_data = allocine[allocine['genre'].isin(genres_to_include)].copy()
filtered_data['premiere_semaine_france'] = pd.to_numeric(filtered_data['premiere_semaine_france'], errors='coerce')
filtered_data.dropna(subset=['premiere_semaine_france', 'genre'], inplace=True)

median_data = filtered_data.groupby('genre')['premiere_semaine_france'].median().reset_index()

fig5 = px.bar(median_data, x='genre', y='premiere_semaine_france',
labels={'genre': 'Genre', 'premiere_semaine_france': 'M√©diane des entr√©es en premi√®re semaine'},
title='üéûÔ∏è M√©diane des entr√©es en premi√®re semaine en France par genre',
color='genre',
color_discrete_map=genres_color)

fig5.update_layout(
xaxis_title='Genre',
yaxis_title='M√©diane des entr√©es en premi√®re semaine',
xaxis={'categoryorder':'total descending'},
height=800
)
fig5.update_xaxes(tickangle=45)
fig5.update_layout(width=800, height=600)
st.plotly_chart(fig5)

st.markdown('<div class="box"><p>On remarque qu‚Äôen France, en premi√®re semaine, ce sont les films d‚Äôaction qui g√©n√®rent le plus de spectateurs, suivis de pr√®s par les films d‚Äôaventures. Le drame, genre tr√®s repr√©sent√© chaque ann√©e, est loin d‚Äôattirer le plus de spectateurs. Ainsi, le lien entre un genre et le succ√®s d‚Äôun film est √† nuancer notamment par la surrepr√©sentation de certains genres ou encore la perception que nous pouvons en avoir.</p></div>', unsafe_allow_html=True)

#---------------#

allocine['genre'] = allocine['genre'].str.split(', ')
allocine = allocine.explode('genre')

genres_to_include = ['Drame', 'Com√©die', 'Action', 'Com√©die dramatique', 'Aventure', 
        'Documentaire', 'Biopic', 'Animation', 'Policier', 'Epouvante-horreur', 
        'Thriller', 'Fantastique']

genres_color = {'Drame': 'blue', 'Com√©die': 'red', 'Action': 'orange', 'Com√©die dramatique': 'purple', 'Aventure': 'yellow', 
'Documentaire': 'grey', 'Biopic': 'green', 'Animation': 'pink', 'Policier': 'brown', 'Epouvante-horreur': 'black', 
'Thriller': 'coral', 'Fantastique': 'turquoise'}

allocine = allocine[allocine['genre'].isin(genres_to_include)]

grouped_data = allocine.groupby(['genre', 'mois', 'mois_nom']).size().reset_index(name='counts')

rows, cols = 6, 2
fig5 = make_subplots(rows=rows, cols=cols, subplot_titles=genres_to_include)

positions = [(i, j) for i in range(1, rows+1) for j in range(1, cols+1)]

for genre, pos in zip(genres_to_include, positions):
            data = grouped_data[grouped_data['genre'] == genre]
            trace = go.Bar(x=data['mois'], y=data['counts'], name=genre, marker_color=genres_color[genre])
            fig5.add_trace(trace, row=pos[0], col=pos[1])
fig5.update_xaxes(tickvals=allocine['mois'], ticktext=allocine['mois_nom'])
fig5.update_layout(height=1600, width=800, title_text="üéûÔ∏è Occurrences de films par mois et par genre", showlegend=False)
fig5.update_xaxes(tickangle=45)

st.plotly_chart(fig5)

st.markdown('<div class="box"><p>Ici, nous n‚Äôavons repr√©sent√© que les 12 genres ayant le plus d‚Äôoccurrences. On remarque des pics de certains genres √† des p√©riodes cl√©. Notamment les films d‚Äôhorreurs sont plus repr√©sent√©s en octobre (Halloween). Les films d‚Äôanimation sont plus repr√©sent√©s pendant la p√©riode des f√™tes de fin d‚Äôann√©e (en d√©cembre) et connaissent √©galement des pics en f√©vrier et octobre qui peuvent correspondre aux vacances scolaires. Il y a un pic de films d‚Äôaction pendant l‚Äô√©t√© (traditionnellement p√©riode o√π sortent les blockbusters).</p></div>', unsafe_allow_html=True)

#---------------#

actors_columns = ['acteur_1', 'acteur_2', 'acteur_3', 'acteur_4']
melted_actors = pd.melt(allocine, id_vars=['premiere_semaine_france'], value_vars=actors_columns, value_name='actor').dropna().drop(columns='variable', axis=1)

top_10_actors = melted_actors.groupby('actor')['premiere_semaine_france'].sum().nlargest(10)

fig6 = px.bar(top_10_actors, x=top_10_actors.values, y=top_10_actors.index, orientation='h',
text=top_10_actors.values,
labels={'y': 'Acteurs', 'x': 'Nombre total d‚Äôentr√©es premi√®re semaine France'},
color_discrete_sequence=['green'],
title='üßë Top 10 des acteurs avec le plus grand nombre d‚Äôentr√©es en premi√®re semaine France')

fig6.update_traces(texttemplate='%{text:.3s}', textposition='inside', hovertemplate='<b>%{y}</b><br>Nombre total d‚Äôentr√©es premi√®re semaine: %{x}<extra></extra>')
fig6.update_layout(
    xaxis_title='Nombre total d‚Äôentr√©es premi√®re semaine France',
    yaxis_title='Acteurs',
    uniformtext_minsize=8, uniformtext_mode='hide',
    height=400, width=800, yaxis_autorange='reversed'
)
st.plotly_chart(fig6)

st.markdown('<div class="box"><p>C‚Äôest le quatuor des films Harry Potter (8 films) qui cumule le plus de spectateurs en premi√®re semaine. Dans le reste du classement, on trouve deux acteurs fran√ßais : Jean Dujardin et G√©rard Depardieu, tous deux tr√®s populaires et dont certains films ont d√©pass√© les fronti√®res de la France. Ils ont √©galement eu des r√¥les √† l‚Äôinternational. Entre la 6e et la 10e position, on trouve des acteurs am√©ricains ayant tous particip√© √† des franchises : Pirates des Cara√Øbes pour Johnny Depp, Avengers et Iron Man pour Robert Downey Jr., Mission : Impossible pour Tom Cruise et enfin Twilight pour Taylor Lautner.</p></div>', unsafe_allow_html=True)

#---------------#

allocine_notes = allocine[['note_presse', 'note_spectateurs']].apply(lambda x: x.str.replace(',', '.').astype(float))

press_histogram, press_edges = np.histogram(allocine_notes['note_presse'], bins=np.linspace(1, 5, 9))
spect_histogram, spect_edges = np.histogram(allocine_notes['note_spectateurs'], bins=np.linspace(1, 5, 9))

press_percentage = (press_histogram / press_histogram.sum())*100
spect_percentage = (spect_histogram / spect_histogram.sum())*100

p1 = figure(plot_height=250, plot_width=800, title="‚úçÔ∏è Distribution des notes de la presse", tools="", x_range=(1, 5), y_range=(0, 35))
p2 = figure(plot_height=250, plot_width=800, title="‚úçÔ∏è Distribution des notes des spectateurs", tools="", x_range=(1, 5), y_range=(0, 35))
p3 = figure(plot_height=250, plot_width=800, title="‚úçÔ∏è Comparaison de la distribution", tools="", x_range=(1, 5), y_range=(0, 35))

for p in [p1, p2, p3]:
    p.xaxis.axis_label = "Notes"
    p.yaxis.axis_label = "Pourcentage de Films (%)"
    p.grid.grid_line_color = "whitesmoke"

p1.vbar(x=press_edges+0.25, top=press_percentage, width=0.5, fill_color='cornflowerblue', line_color='white')
p2.vbar(x=spect_edges+0.25, top=spect_percentage, width=0.5, fill_color='burlywood', line_color='white')

p3.vbar(x=press_edges+0.25, top=press_percentage, width=0.5, fill_color=None, line_color='cornflowerblue', line_width=3)
p3.vbar(x=spect_edges+0.25, top=spect_percentage, width=0.5, fill_color=None, line_color='burlywood', line_width=3)

hover_p1 = HoverTool(tooltips=[("Pourcentage de Films", "@top{0.2f} %")])
hover_p2 = HoverTool(tooltips=[("Pourcentage de Films", "@top{0.2f} %")])
p1.add_tools(hover_p1)
p2.add_tools(hover_p2)

p3.legend.location = "top_right"
st.bokeh_chart(p1, use_container_width=True)
st.bokeh_chart(p2, use_container_width=True)
st.bokeh_chart(p3, use_container_width=True)

st.markdown('<div class="box"><p>On observe que les deux distributions se ressemblent. La presse semble attribuer plus facilement des notes moyennes que les spectateurs.</p></div>', unsafe_allow_html=True)

#---------------#

allocine_budget = pd.read_csv('data/Allocine_v2_8.csv')
correlation = allocine_budget['premiere_semaine_france'].corr(allocine_budget['budget_euro'])

def millions_formatter(x, pos):
    return f'{x / 1e6}M'
formatter = FuncFormatter(millions_formatter)

plt.figure(figsize=(20, 10))

sns.regplot(x='budget_euro', y='premiere_semaine_france', data=allocine_budget)
plt.xlabel('Budget du film')
plt.ylabel('Premi√®re semaine en France (nombre de spectateurs)')
plt.title(f'Corr√©lation entre le budget du film et la premi√®re semaine en France. Pearson : {round(correlation, 3)}')
plt.gca().yaxis.set_major_formatter(formatter)
plt.gca().xaxis.set_major_formatter(formatter)
st.pyplot(plt)

st.markdown('<div class="box"><p>Ces graphiques illustrent la corr√©lation entre le budget d‚Äôun film et le nombre d‚Äôentr√©es en premi√®re semaine en France. On remarque une corr√©lation positive avec un coefficient de Pearson de 0,62.</p></div>', unsafe_allow_html=True)

#---------------#
