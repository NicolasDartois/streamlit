import streamlit as st
import joblib as jl
import pandas as pd
import numpy as np
from include.css_and_credit import css_and_credit
from datetime import date
from openai import OpenAI
import os

#client = OpenAI(api_key=os.environ['API_KEY_OPENAI'])

def generate_text(prompt):
    response = openai.Completion.create(
        engine="gpt-4",
        prompt=prompt,
        max_tokens=100
    )
    return response.choices[0].text.strip()

def generate_image(prompt):
    response = openai.Image.create(
        prompt=prompt,
        n=1,
        size="1024x1024"
    )
    return response['data'][0]['url']

st.set_page_config(page_title="Exploitation cin√©matographique", page_icon='üé¨', layout="wide")

css_and_credit()
st.header("üé¨ D√©monstration")
            
st.markdown("<br><br><br>", unsafe_allow_html=True)
model = jl.load("models/GB.joblib")

df_acteur = pd.read_csv('data/score_acteur.csv')
df_real = pd.read_csv('data/score_real.csv')
df_scenar = pd.read_csv('data/score_scenar.csv')
df_distrib = pd.read_csv('data/score_distrib.csv')

col1, col2, col3, col4, col5, col6 = st.columns([1,2,2,2,2,1])
with col2:
    acteur1 = st.selectbox('Acteur principal :', df_acteur['Acteur'])
    score_acteur1 = df_acteur[df_acteur['Acteur'] == acteur1]['Score'].values[0]
    
with col3:    
    acteur2 = st.selectbox('Acteur secondaire :', df_acteur['Acteur'])
    score_acteur2 = df_acteur[df_acteur['Acteur'] == acteur2]['Score'].values[0]
    score_acteur = (score_acteur1*1.125)+(score_acteur2*0.75)   
with col4:    
    real = st.selectbox('R√©alisateur :', df_real['realisateur'])
    score_real = df_real[df_real['realisateur'] == real]['score'].values[0]
with col5:
    scenar = st.selectbox('Sc√©nariste :', df_scenar['scenariste'])
    score_scenar = df_scenar[df_scenar['scenariste'] == scenar]['score'].values[0]

col1, col2, col3, col4, col5, col6 = st.columns([1,2,2,2,2,1])
with col2:    
    distrib = st.selectbox('Distributeur :', df_distrib['distributeur'])
    score_distrib  = df_distrib[df_distrib['distributeur'] == distrib]['score'].values[0]
with col3:    
    date_sortie = st.date_input('Date de sortie', min_value=date(2000, 1, 1), max_value=date(2023, 12, 31))
with col4:
    pays = st.selectbox('S√©lectionnez le pays', ['USA', 'France', 'Autre'])
with col5:     
    genre = st.selectbox('S√©lectionnez le genre', ['Com√©die', 'Documentaire', 'Action'])

col1, col2, col3, col4 = st.columns([1,4,4,1])
with col2:
    budget = st.slider('S√©lectionnez le budget en millions d\'euros', 10, 200, step=10, value=50)
with col3:    
    duree = st.slider('S√©lectionnez la duree', 40, 200, step=20, value=100)

df_predict = pd.DataFrame(columns = ['budget_euro', 'acteur', 'realisateur', 'scenariste', 'distributeur', 'duree', 'USA', 'France', 'Famille', 'Com√©die musicale', 'Musical', 'Com√©die dramatique', 'Action', 'Aventure', 'Historique', 'Biopic', 'Guerre', 'Drame', 'Documentaire', 'Fantastique', 'Espionnage', 'Animation', 'Romance', 'Com√©die', 'Policier', 'Epouvante-horreur', 'Thriller', 'Science Fiction', 'cos_jour_mois', 'sin_jour_mois', 'cos_mois', 'sin_mois', 'cos_jour_semaine', 'sin_jour_semaine'])

col1, col2, col3 = st.columns([1, 8, 1])
with col2: 
            if st.button('Scotty, lance la pr√©diction !'):
                data_predict = {
                    'budget_euro': int(budget*1000000),
                    'acteur': score_acteur,
                    'realisateur': score_real,
                    'scenariste': score_scenar,
                    'distributeur': score_distrib,
                    'duree': int(duree),
                    'USA': True if pays == 'USA' else False,
                    'France': True if pays == 'France' else False,
                    'Famille': False,
                    'Com√©die musicale': False,
                    'Musical': False,
                    'Com√©die dramatique': False,
                    'Action': True if genre == 'Action' else False,
                    'Aventure': False,
                    'Historique': False,
                    'Biopic': False,
                    'Guerre': False,
                    'Drame': False,
                    'Documentaire': True if genre == 'Documentaire' else False,
                    'Fantastique': False,
                    'Espionnage': False,
                    'Animation': False,
                    'Romance': False,
                    'Com√©die': True if genre == 'Com√©die' else False,
                    'Policier': False,
                    'Epouvante-horreur': False,
                    'Thriller': False,
                    'Science Fiction': False,
                    'cos_jour_mois': np.cos(date_sortie.day),
                    'sin_jour_mois': np.sin(date_sortie.day),
                    'cos_mois': np.cos(date_sortie.month),
                    'sin_mois': np.sin(date_sortie.month),
                    'cos_jour_semaine': np.cos(date_sortie.weekday()),
                    'sin_jour_semaine': np.sin(date_sortie.weekday())
                }
                df_predict.loc[0] = data_predict
                input_data = df_predict
                prediction = model.predict(input_data)
                st.dataframe(df_predict[['budget_euro','acteur','realisateur','scenariste','distributeur','duree','USA','France','Action','Documentaire','Com√©die','cos_jour_mois','sin_jour_mois','cos_mois','sin_mois','cos_jour_semaine','sin_jour_semaine']])
                st.write(f'Le mod√®le predit <span style="font-size:20px; color:#27AE60;"><b>{str(round(prediction[0]))}</b></span> entr√©es la premi√®re semaine en france.', unsafe_allow_html=True)
                
                #prompt_synopsis = f"""G√©n√®re un synopsis en fran√ßais pour un film {pays} sorti en {date_sortie.year}, r√©alis√© par {real}, distribu√© par {distrib}, dans le genre {genre}, avec {acteur1} en acteur principal et {acteur2} en acteur secondaire.(Attention, ne donne pas le titre dans ta reponse)"""
                #response_synopsis = client.chat.completions.create(
                #    model="gpt-4",
                #    messages=[{"role": "user", "content": prompt_synopsis}],
                #)
        
                #prompt_titre = f"""G√©n√®re un titre en fran√ßais pour ce synopsis (Attention, uniquement le titre dans ta reponse, rien d'autre) : {response_synopsis}"""
                #response_titre = client.chat.completions.create(
                #    model="gpt-4",
                #    messages=[{"role": "user", "content": prompt_titre}],
                #)
                
                #prompt_affiche = f"""G√©n√®re une affiche en fran√ßais pour ce synopsis (Aucun acteur sur l'affiche ne doit ressembler √† une personne r√©elle) : {response_synopsis}"""
                #response_affiche = client.images.generate(
                #    model="dall-e-3", 
                #    prompt=prompt_affiche, 
                #    n=1, 
                #    size="1024x1792"
                #)
              
                col1, col2, col3, col4 = st.columns([2, 3, 13, 2])
                st.markdown(f"""
                    <div class="wrapper2">
                        <div class="box">
                            <img src="https://github.com/NicolasDartois/streamlit_2/blob/main/images/test.png?raw=true" class="fit-img"/>
                        </div>
                        <div class="box">
                            <h3>"Double Jeu √† Manhattan : Variations sur un Th√®me de Woody Allen"</h3>
                            <h8>Le <b>{date_sortie}</b> en salle</h8>
                            <h8>Par <b>{real}</b></h8>
                            <h8> Avec <b>{acteur1}</b> et <b>{acteur2}</b></h8>
                            <p>Dans un quartier chic de Manhattan, vit un ancien professeur d'universit√© aux talents musicaux remarquables mais dont la carri√®re artistique n'a jamais d√©coll√©, jou√© par Woody Allen. Sa vie ordinaire et quelque peu morose s'anime un jour o√π un double myst√©rieux le remplace subitement dans sa vie quotidienne. Ce double, aussi jou√© par Woody Allen, est tout ce qu'il n'a jamais r√©ussi √† √™tre : confiant, s√©duisant, et incroyablement talentueux. Notre professeur comprend rapidement que son double est une version am√©lior√©e de lui-m√™me et accepte sa pr√©sence, esp√©rant tirer des le√ßons de son comportement.Cependant, alors que le double commence √† prendre une place de plus en plus importante, cr√©ant des complications hilarantes, l'ancien professeur se trouve dans une position d√©licate : il doit √† la fois g√©rer sa jalousie envers cette version de lui-m√™me plus r√©ussie et essayer de reprendre sa place dans sa propre vie. Il concocte un plan pour se d√©barrasser de son alter ego, mais les choses ne se passent pas comme pr√©vu. S'ensuit une s√©rie de p√©rip√©ties irr√©sistiblement dr√¥les qui mettront en lumi√®re le vrai visage du professeur.Le film, r√©alis√© par Roman Polanski, emprunte √† la fois √† la com√©die, au fantastique et au drame, jouant habilement sur les diff√©rentes tonalit√©s pour faire avancer l'histoire. Entre situations cocasses, reparties cinglantes et moments d'√©motion, on suit avec d√©lice le combat existentiel de cet homme contre lui-m√™me, dans une mise en ab√Æme teint√©e d'ironie et de tendresse. Il sera question d'identit√©, de qu√™te du soi, d'acceptation de soi et d'accomplissement personnel √† travers cette com√©die inattendue et d√©licieusement absurde.</p>
                        </div>
                    </div>""", unsafe_allow_html=True)

                
                

